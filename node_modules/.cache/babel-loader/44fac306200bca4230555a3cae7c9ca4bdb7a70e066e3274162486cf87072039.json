{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, createUserWithEmailAndPassword, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAYyguWkJIljLxtXN7PUL2_qEjvORzPSyQ\",\n  authDomain: \"clothing-app-208f1.firebaseapp.com\",\n  projectId: \"clothing-app-208f1\",\n  storageBucket: \"clothing-app-208f1.appspot.com\",\n  messagingSenderId: \"159466112684\",\n  appId: \"1:159466112684:web:b91692834327ac556b8109\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider); /// here we create a siging method with google \n\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid); /// here we create new document inside a the collection of 'users'\n\n  const userSnapShot = await getDoc(userDocRef); // here we use snapshot to get the document data if it exists \n\n  if (!userSnapShot.exists()) {\n    //// id the document does not exist we create new one with the data that we get from the authentification phase with google \n    const {\n      displayName,\n      email\n    } = userAuth;\n    const creatAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        creatAt\n      });\n    } catch (error) {\n      console.log(`failing to add new user ${error.message}`);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return createAuthUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","createUserWithEmailAndPassword","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapShot","exists","displayName","email","creatAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password"],"sources":["/Users/mac/Desktop/ecommerce-app/src/utils /firebase/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, createUserWithEmailAndPassword, GoogleAuthProvider} from 'firebase/auth'\nimport { getFirestore, doc, getDoc, setDoc} from 'firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAYyguWkJIljLxtXN7PUL2_qEjvORzPSyQ\",\n  authDomain: \"clothing-app-208f1.firebaseapp.com\",\n  projectId: \"clothing-app-208f1\",\n  storageBucket: \"clothing-app-208f1.appspot.com\",\n  messagingSenderId: \"159466112684\",\n  appId: \"1:159466112684:web:b91692834327ac556b8109\"\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n    prompt:'select_account'\n});\n\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider) /// here we create a siging method with google \n\n\n\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n    if(!userAuth) return;\n\n    const userDocRef = doc(db, 'users', userAuth.uid) /// here we create new document inside a the collection of 'users'\n\n    \n    const userSnapShot = await getDoc(userDocRef) // here we use snapshot to get the document data if it exists \n\n\n    if(!userSnapShot.exists()) { //// id the document does not exist we create new one with the data that we get from the authentification phase with google \n        const { displayName, email } = userAuth;\n        const creatAt = new Date()\n\n        try {\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                creatAt\n            })\n\n        } catch(error) {\n\n            console.log(`failing to add new user ${error.message}`)\n\n        }\n    }\n\n    return userDocRef;\n\n}\n\n\nexport const createAuthUserWithEmailAndPassword = async(email, password) => {\n    if(!email || !password) return;\n\n   return  createAuthUserWithEmailAndPassword(auth, email, password);\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,8BAA8B,EAAEC,kBAAkB,QAAO,eAAe;AAC/H,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAO,oBAAoB;AAErE,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,oCAAoC;EAChDC,SAAS,EAAE,oBAAoB;EAC/BC,aAAa,EAAE,gCAAgC;EAC/CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;AAEjD,MAAMQ,cAAc,GAAG,IAAIb,kBAAkB,CAAC,CAAC;AAE/Ca,cAAc,CAACC,mBAAmB,CAAC;EAC/BC,MAAM,EAAC;AACX,CAAC,CAAC;AAGF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KAAMnB,eAAe,CAACkB,IAAI,EAAEH,cAAc,CAAC,EAAC;;AAKjF,OAAO,MAAMK,EAAE,GAAGjB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMkB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC1D,IAAG,CAACA,QAAQ,EAAE;EAEd,MAAMC,UAAU,GAAGnB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC,EAAC;;EAGlD,MAAMC,YAAY,GAAG,MAAMpB,MAAM,CAACkB,UAAU,CAAC,EAAC;;EAG9C,IAAG,CAACE,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;IAAE;IACzB,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGN,QAAQ;IACvC,MAAMO,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE1B,IAAI;MACA,MAAMxB,MAAM,CAACiB,UAAU,EAAE;QACrBI,WAAW;QACXC,KAAK;QACLC;MACJ,CAAC,CAAC;IAEN,CAAC,CAAC,OAAME,KAAK,EAAE;MAEXC,OAAO,CAACC,GAAG,CAAE,2BAA0BF,KAAK,CAACG,OAAQ,EAAC,CAAC;IAE3D;EACJ;EAEA,OAAOX,UAAU;AAErB,CAAC;AAGD,OAAO,MAAMY,kCAAkC,GAAG,MAAAA,CAAMP,KAAK,EAAEQ,QAAQ,KAAK;EACxE,IAAG,CAACR,KAAK,IAAI,CAACQ,QAAQ,EAAE;EAEzB,OAAQD,kCAAkC,CAACjB,IAAI,EAAEU,KAAK,EAAEQ,QAAQ,CAAC;AACpE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}